<!-- -*- mode: XML -*- -->
<launch>
<!-- ******** Ros Parameter For Stitching Do Not Edit By Hand ******** -->
<rosparam param="LidarFrontLeft_Fine_Param">[0.484, 1.210, -2.168, 0, 0, 0.883]</rosparam>
<rosparam param="LidarFrontRight_Fine_Param">[0.524, -1.048, -2.269, 0, 0, -0.898]</rosparam>
<rosparam param="LidarRearLeft_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>
<rosparam param="LidarRearRight_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>

<!-- Ros Parameter Backup 
<rosparam param="LidarFrontLeft_Fine_Param">[0.582, -0.867, -1.899, -0.209, 0.209, 0.22]</rosparam>
<rosparam param="LidarFrontRight_Fine_Param">[-1.536, -0.863, -1.409, -0.22, 0.259, 2.94]</rosparam>
<rosparam param="LidarRearLeft_Fine_Param">[-6.36, 1.1, -2.24, 3.14, -3.08, -1.08]</rosparam>
<rosparam param="LidarRearRight_Fine_Param">[-6.37, -1.23, -2.28, 0.03, -0.07, -2.03]</rosparam>
-->

<!-- Global arg ************************************************************ -->
    <!-- System -->
	<arg name="mode" default="0" />

	<!-- Hardware -->
	<arg name="hardware_enable" default="true" />
    
	<!-- Grabber & Preprocessing -->
    <arg name="use_oct_compress" default="false" />

	<arg name="use_filter" default="true" />
	<arg name="use_roi" default="false" />
	
	<!-- SSN and Shape -->
	<arg name="use_shape_estimation" default="true" />

	<!-- Ouster Setting -->
	<arg name="set_group_1" default="/LidarFrontRight"/>
	<arg name="set_group_2" default="/LidarFrontLeft"/>
	<arg name="set_group_3" default="/LidarFrontTop"/>

<!-- Parameter ************************************************************* -->
	<param name="use_oct_compress" value="$(arg use_oct_compress)" />

	<param name="use_filter" value="$(arg use_filter)"/>
	<param name="use_roi" value="$(arg use_roi)"/>
	<param name="use_shape_estimation" value="$(arg use_shape_estimation)"/>
	<rosparam param="debug_output">true</rosparam>
	<rosparam param="LaunchFileName">b1.launch</rosparam>

<!-- tf2 ******************************************************************* -->
	<node pkg="tf2_ros" type="static_transform_publisher" name="tf_baselink_to_os1sensor"  args="0 0 0 -3.1415926 0 0 base_link os1_sensor" />
	<node pkg="tf2_ros" type="static_transform_publisher" name="tf_baselink_to_lidar"  args="0 0 0 0 0 0 base_link lidar" />

<!-- Compression *********************************************************** -->
	<group if="$(arg use_compress)">
		<node pkg="raw_points_processor" type="raw_points_processor_compressor" name="raw_points_compressor" output="screen" cwd="node" respawn="true"  /> 
	</group>

<!-- Old Stitch ******************************************************************* -->
	<group if="$(arg use_old_stitch)">
		<rosparam param="LidarFrontLeft_Fine_Param">[0.462, 1.098, -1.858, 0.031, -0.007, 1.783]</rosparam>
		<rosparam param="LidarFrontRight_Fine_Param">[0.512, -1.053, -1.836, -0.025, -0.01, -1.785]</rosparam>
		<rosparam param="LidarRearLeft_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>
		<rosparam param="LidarRearRight_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>
	</group>

<!-- Mode Switch ************************************************************ -->
	<group if="$(eval arg('mode') == 0)">
		<include file="$(find pc2_compressor)/launch/cmpr.launch" />
        <node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
		<include file="$(find lidar_point_pillars)/launch/lidar_point_pillars.launch" />
	</group>

	<group if="$(eval arg('mode') == 1)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" args="-D"  />
	</group>

	<group if="$(eval arg('mode') == 2)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node"  />
	</group>

	<group if="$(eval arg('mode') == 3)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 		 	name="lidars_grabber" 	  		output="screen" cwd="node"  />
		<node pkg="lidars_preprocessing" 		type="lidars_preprocessing_b1" 		name="lidars_preprocessing_b1" 		output="screen" cwd="node"  />
	</group>

	<group if="$(eval arg('mode') == 4)">
        <node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
		<node pkg="lidars_preprocessing" 		type="lidars_preprocessing_b1" 		name="lidars_preprocessing_b1" 		output="screen" cwd="node"  />
		<node pkg="lidar_squseg_v2_inference"   type="lidar_squseg_v2_inference"	name="lidar_squseg_v2_inference"   	output="screen" cwd="node" args="b1 X 0 1" /> 
		<node pkg="output_results_by_dbscan" 	type="output_results_by_dbscan_b1"  name="output_results_by_dbscan_b1"  output="screen" cwd="node" respawn="true"  />
	</group>

	<group if="$(eval arg('mode') == 5)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
		<include file="$(find lidar_point_pillars)/launch/lidar_point_pillars.launch" />
	</group>

	<group if="$(eval arg('mode') == 9)">
		<include file="$(find pc2_compressor)/launch/decmpr.launch" />
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
		<include file="$(find lidar_point_pillars)/launch/lidar_point_pillars.launch" />
	</group>


<!-- Lidar Driver ********************************************************************************** -->
<!-- ************ Ouster64 ************ -->
    <group ns="$(arg set_group_1)" if="$(arg hardware_enable)">
        <arg name="os1_hostname" default="192.168.0.101" doc="hostname or IP in dotted decimal form of the sensor"/>
        <arg name="os1_udp_dest" default="192.168.0.1" doc="hostname or IP where the sensor will send data packets"/>
        <arg name="os1_lidar_port" default="7501" doc="port to which the sensor should send lidar data"/>
        <arg name="os1_imu_port" default="7511" doc="port to which the sensor should send imu data"/>
        <arg name="replay" default="false" doc="do not connect to a sensor; expect /os1_node/{lidar,imu}_packets from replay"/>
        <arg name="lidar_mode" default="1024x20" doc="resolution and rate: either 512x10, 512x20, 1024x10, 1024x20, or 2048x10"/>
        <arg name="metadata" default="" doc="override default metadata file for replays"/>
        <arg name="frame_id" default="lidar_front_right"/>

        <node pkg="ouster_ros" name="os1_node" type="os1_node" output="screen" respawn="true">
            <param name="~/lidar_mode" type="string" value="$(arg lidar_mode)"/>
            <param name="~/replay" value="$(arg replay)"/>
            <param name="~/os1_hostname" value="$(arg os1_hostname)"/>
            <param name="~/os1_udp_dest" value="$(arg os1_udp_dest)"/>
            <param name="~/os1_lidar_port" value="$(arg os1_lidar_port)"/>
            <param name="~/os1_imu_port" value="$(arg os1_imu_port)"/>
            <param name="~/metadata" value="$(arg metadata)"/>
        </node>

        <node pkg="ouster_ros" type="os1_cloud_node" name="os1_cloud_node" output="screen" respawn="true">
            <remap from="$(arg set_group_1)/os1_cloud_node/os1_config" to="$(arg set_group_1)/os1_node/os1_config"/>
            <remap from="$(arg set_group_1)/os1_cloud_node/lidar_packets" to="$(arg set_group_1)/os1_node/lidar_packets"/>
			<remap from="$(arg set_group_1)/os1_cloud_node/imu_packets" to="$(arg set_group_1)/os1_node/imu_packets"/>

            <remap from="$(arg set_group_1)/os1_cloud_node/points" to="$(arg set_group_1)/Raw"/>
			<remap from="$(arg set_group_1)/os1_cloud_node/imu" to="$(arg set_group_1)/imu"/>
            <param name="~/frame_id" value="$(arg frame_id)"/>
        </node>
    </group>


<!-- ************ Ouster64 ************ -->
    <group ns="$(arg set_group_2)" if="$(arg hardware_enable)">
        <arg name="os1_hostname" default="192.168.0.102" doc="hostname or IP in dotted decimal form of the sensor"/>
        <arg name="os1_udp_dest" default="192.168.0.1" doc="hostname or IP where the sensor will send data packets"/>
        <arg name="os1_lidar_port" default="7502" doc="port to which the sensor should send lidar data"/>
        <arg name="os1_imu_port" default="7512" doc="port to which the sensor should send imu data"/>
        <arg name="replay" default="false" doc="do not connect to a sensor; expect /os1_node/{lidar,imu}_packets from replay"/>
        <arg name="lidar_mode" default="1024x20" doc="resolution and rate: either 512x10, 512x20, 1024x10, 1024x20, or 2048x10"/>
        <arg name="metadata" default="" doc="override default metadata file for replays"/>
        <arg name="frame_id" default="lidar_front_left"/>

        <node pkg="ouster_ros" name="os1_node" type="os1_node" output="screen" respawn="true">
            <param name="~/lidar_mode" type="string" value="$(arg lidar_mode)"/>
            <param name="~/replay" value="$(arg replay)"/>
            <param name="~/os1_hostname" value="$(arg os1_hostname)"/>
            <param name="~/os1_udp_dest" value="$(arg os1_udp_dest)"/>
            <param name="~/os1_lidar_port" value="$(arg os1_lidar_port)"/>
            <param name="~/os1_imu_port" value="$(arg os1_imu_port)"/>
            <param name="~/metadata" value="$(arg metadata)"/>
        </node>

        <node pkg="ouster_ros" type="os1_cloud_node" name="os1_cloud_node" output="screen" respawn="true">
            <remap from="$(arg set_group_2)/os1_cloud_node/os1_config" to="$(arg set_group_2)/os1_node/os1_config"/>
            <remap from="$(arg set_group_2)/os1_cloud_node/lidar_packets" to="$(arg set_group_2)/os1_node/lidar_packets"/>
			<remap from="$(arg set_group_2)/os1_cloud_node/imu_packets" to="$(arg set_group_2)/os1_node/imu_packets"/>

            <remap from="$(arg set_group_2)/os1_cloud_node/points" to="$(arg set_group_2)/Raw"/>
			<remap from="$(arg set_group_2)/os1_cloud_node/imu" to="$(arg set_group_2)/imu"/>
            <param name="~/frame_id" value="$(arg frame_id)"/>
        </node>
    </group>


<!-- ************ Ouster64 ************ -->
    <group ns="$(arg set_group_3)" if="$(arg hardware_enable)">
        <arg name="os1_hostname" default="192.168.0.103" doc="hostname or IP in dotted decimal form of the sensor"/>
        <arg name="os1_udp_dest" default="192.168.0.1" doc="hostname or IP where the sensor will send data packets"/>
        <arg name="os1_lidar_port" default="7503" doc="port to which the sensor should send lidar data"/>
        <arg name="os1_imu_port" default="7513" doc="port to which the sensor should send imu data"/>
        <arg name="replay" default="false" doc="do not connect to a sensor; expect /os1_node/{lidar,imu}_packets from replay"/>
        <arg name="lidar_mode" default="1024x20" doc="resolution and rate: either 512x10, 512x20, 1024x10, 1024x20, or 2048x10"/>
        <arg name="metadata" default="" doc="override default metadata file for replays"/>
        <arg name="frame_id" default="lidar"/>

        <node pkg="ouster_ros" name="os1_node" type="os1_node" output="screen" respawn="true">
            <param name="~/lidar_mode" type="string" value="$(arg lidar_mode)"/>
            <param name="~/replay" value="$(arg replay)"/>
            <param name="~/os1_hostname" value="$(arg os1_hostname)"/>
            <param name="~/os1_udp_dest" value="$(arg os1_udp_dest)"/>
            <param name="~/os1_lidar_port" value="$(arg os1_lidar_port)"/>
            <param name="~/os1_imu_port" value="$(arg os1_imu_port)"/>
            <param name="~/metadata" value="$(arg metadata)"/>
        </node>

        <node pkg="ouster_ros" type="os1_cloud_node" name="os1_cloud_node" output="screen" respawn="true">
            <remap from="$(arg set_group_3)/os1_cloud_node/os1_config" to="$(arg set_group_3)/os1_node/os1_config"/>
            <remap from="$(arg set_group_3)/os1_cloud_node/lidar_packets" to="$(arg set_group_3)/os1_node/lidar_packets"/>
			<remap from="$(arg set_group_3)/os1_cloud_node/imu_packets" to="$(arg set_group_3)/os1_node/imu_packets"/>

            <remap from="$(arg set_group_3)/os1_cloud_node/points" to="$(arg set_group_3)/Raw"/>
			<remap from="$(arg set_group_3)/os1_cloud_node/imu" to="$(arg set_group_3)/imu"/>
            <param name="~/frame_id" value="$(arg frame_id)"/>
        </node>
    </group>


</launch>
