<!-- -*- mode: XML -*- -->

<launch>
<!-- ******** Ros Parameter For Stitching Do Not Edit By Hand ******** -->
<!-- Update Time: 20210222 -->
<rosparam param="LidarFrontLeft_Fine_Param">[0.524, 1.187, -2.134, -0.004, 0.03, 0.959]</rosparam>
<rosparam param="LidarFrontRight_Fine_Param">[0.524, -1.089, -2.108, 0.05, 0.01, -1.007]</rosparam>
<rosparam param="LidarRearLeft_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>
<rosparam param="LidarRearRight_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>

<!-- Ros Parameter Backup 
<rosparam param="LidarFrontLeft_Fine_Param">[0.484, 1.210, -2.168, 0, 0, 0.891]</rosparam>
<rosparam param="LidarFrontRight_Fine_Param">[0.524, -1.048, -2.269, 0.01, 0, -0.898]</rosparam>
<rosparam param="LidarRearLeft_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>
<rosparam param="LidarRearRight_Fine_Param">[0, 0, 0, 0, 0, 0]</rosparam>
-->

<!-- Global arg ************************************************************ -->
    <!-- System -->
	<arg name="mode" default="0" />

	<!-- Hardware -->
	<arg name="hardware_enable" default="true" />
    
	<!-- Grabber & Preprocessing -->
    <arg name="use_oct_compress" default="false" />
	<arg name="use_filter" default="true" />
	<arg name="use_roi" default="true" />

	<!-- Stitching-->
	<arg name="use_old_stitch" default="false"/>

<!-- Parameter ************************************************************* -->
	<param name="use_oct_compress" value="$(arg use_oct_compress)" />

	<param name="use_filter" value="$(arg use_filter)"/>
	<param name="use_roi" value="$(arg use_roi)"/>
	<param name="use_shape_estimation" value="true"/>
	<rosparam param="debug_output">true</rosparam>
	<rosparam param="LaunchFileName">b1.launch</rosparam>

<!-- tf2 ******************************************************************* -->
	<node pkg="tf2_ros" type="static_transform_publisher" name="tf_baselink_to_os1sensor"  args="0 0 0 -3.1415926 0 0 base_link os1_sensor" />
	<node pkg="tf2_ros" type="static_transform_publisher" name="tf_baselink_to_lidar"  args="0 0 0 0 0 0 base_link lidar" />

<!-- Mode Switch ************************************************************ -->
	<group if="$(eval arg('mode') == 0)">
        <node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
		<include file="$(find lidar_point_pillars)/launch/lidar_point_pillars.launch" />
	</group>

	<group if="$(eval arg('mode') == 1)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" args="-D"  />
	</group>

	<group if="$(eval arg('mode') == 2)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node"  />
	</group>

	<group if="$(eval arg('mode') == 3)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 		 	name="lidars_grabber" 	  		output="screen" cwd="node"  />
		<node pkg="lidars_preprocessing" 		type="lidars_preprocessing_b1" 		name="lidars_preprocessing_b1" 		output="screen" cwd="node"  />
	</group>

	<group if="$(eval arg('mode') == 4)">
        <node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
		<node pkg="lidars_preprocessing" 		type="lidars_preprocessing_b1" 		name="lidars_preprocessing_b1" 		output="screen" cwd="node"  />
		<node pkg="lidar_squseg_v2_inference"   type="lidar_squseg_v2_inference"	name="lidar_squseg_v2_inference"   	output="screen" cwd="node" args="b1 X 0 1" /> 
		<node pkg="output_results_by_dbscan" 	type="output_results_by_dbscan_b1"  name="output_results_by_dbscan_b1"  output="screen" cwd="node" respawn="true"  />
	</group>

	<group if="$(eval arg('mode') == 5)">
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
		<include file="$(find lidar_point_pillars)/launch/lidar_point_pillars.launch" />
	</group>
	
    <group if="$(eval arg('mode') == 9)">
		<include file="$(find pc2_compressor)/launch/decmpr.launch" />
		<node pkg="lidars_grabber" 				type="lidars_grabber" 			name="lidars_grabber" 			output="screen" cwd="node" respawn="true"  />
	</group>

<!-- Lidar Driver ********************************************************************************** -->
<!-- Left-->
    <include file="$(find ouster_ros)/ouster.launch" if="$(arg hardware_enable)">
    <arg name="group_name" value="/LidarFrontLeft" />
    <arg name="tf_prefix" value="lidar_front_left" doc="as frame_id" />
    <arg name="sensor_hostname" value="192.168.0.223" />
    <arg name="udp_dest" value="192.168.0.1" />
    <arg name="lidar_port" value="7503" />
    <arg name="imu_port" value="7513" />
    </include>

    <!-- Right -->
    <include file="$(find ouster_ros)/ouster.launch" if="$(arg hardware_enable)">
    <arg name="group_name" value="/LidarFrontRight" />
    <arg name="tf_prefix" value="lidar_front_right" doc="as frame_id" />
    <arg name="sensor_hostname" value="192.168.0.227" />
    <arg name="udp_dest" value="192.168.0.1" />
    <arg name="lidar_port" value="7507" />
    <arg name="imu_port" value="7517" />
    </include>

    <!-- Top-->
    <include file="$(find ouster_ros)/ouster.launch" if="$(arg hardware_enable)">
    <arg name="group_name" value="/LidarFrontTop" />
    <arg name="tf_prefix" value="lidar" doc="as frame_id" />
    <arg name="sensor_hostname" value="192.168.0.221" />
    <arg name="udp_dest" value="192.168.0.1" />
    <arg name="lidar_port" value="7501" />
    <arg name="imu_port" value="7511" />
    </include>


</launch>
