#!/bin/bash

# This script is a pre-receive hook allowing pushes whose every file:
# - is smaller than 20 M
# - and its extension is not banned, see BANNED_EXTENSIONS

GITCMD="git"
NULLSHA="0000000000000000000000000000000000000000"
EMPTYTREESHA="4b825dc642cb6eb9a060e54bf8d69288fbee4904"
MAXSIZE="20"
MAXBYTES=$(( $MAXSIZE * 1048576 ))
BANNED_EXTENSIONS=".pb .weights .so .a .engine"
EXIT=0
PRIVATELOGFILE="/dev/null"

function private_log() {
    moment=`date '+%d/%m/%Y %H:%M:%S'`
    echo "[ $moment ] [ POLICY CHECK ] $1" >> $PRIVATELOGFILE
}

function log() {
    moment=`date '+%d/%m/%Y %H:%M:%S'`
    echo "[ $moment ] [ POLICY CHECK ] $1"
}

log "Starting validation..."
while read oldref newref refname; do

    private_log "OLDREF: $oldref NEWREF: $newref REFNAME: $refname"

    # Avoid removed branches
    if [ "${newref}" = "${NULLSHA}" ]; then
        continue
    fi

    # Set oldref properly if this is branch creation.
    if [ "${oldref}" = "${NULLSHA}" ]; then
        oldref=$EMPTYTREESHA
    fi

    # Ignore case
    shopt -s nocaseglob

    newFiles=$($GITCMD diff --stat --name-only --diff-filter=ACMRT ${oldref}..${newref})

    if [[ $? -ne 0 ]]; then
        log "Error 101: Repository incosistency. Cancelling push..."
        exit 1;
    fi

    for filename in "$newFiles"; do
        private_log "Filename: $filename"
        filesize=$($GITCMD cat-file -s "${newref}:${filename}") 2> $PRIVATELOGFILE

        if [[ -z $filesize  ]]; then filesize=0; fi
        filesize_mb=$(($filesize / 1048576))

        if [ "${filesize}" -gt "${MAXBYTES}" ]; then
            log "File $filename is greater than $MAXSIZE MB. Its size is $filesize_mb MB."
            exit 1
        fi

				for ext in ${BANNED_EXTENSIONS}; do
					if [[ "${filename}" == *"${ext}" ]]; then
            echo "Files with extension $ext not allowed. Please remove file $filename"
						exit 1
					fi
				done
    done
done
